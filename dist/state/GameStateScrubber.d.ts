/// <reference types="node" />
import GameState from "./GameState";
import * as Stream from "stream";
import { StreamScrubber, StreamScrubberInhibitor } from "../interfaces";
import GameStateHistory from "./GameStateHistory";
export default class GameStateScrubber extends Stream.Duplex implements StreamScrubber {
    protected history: GameStateHistory;
    protected inhibitor: StreamScrubberInhibitor;
    protected timeSeen: boolean[];
    constructor(history?: GameStateHistory, startFromTurn?: number, opts?: Stream.DuplexOptions);
    protected initialTime: number;
    protected currentTime: number;
    protected endTime: number;
    protected hasEmittedReady: boolean;
    protected hasStarted: boolean;
    protected startFromTurn: number;
    _write(gameState: any, encoding: string, callback: Function): void;
    _read(): void;
    end(): void;
    protected lastUpdate: number;
    protected interval: number;
    play(): void;
    pausePlayback(): void;
    toggle(): void;
    protected speed: number;
    protected multiplier: number;
    protected lastState: GameState;
    protected update(): void;
    seek(time: number): void;
    isPlaying(): boolean;
    isPlaybackPaused(): boolean;
    rewind(): void;
    fastForward(): void;
    setSpeed(speed: number): void;
    getSpeed(): number;
    canInteract(): boolean;
    canRewind(): boolean;
    getCurrentTime(): number;
    hasEnded(): boolean;
    canPlay(): boolean;
    getHistory(): GameStateHistory;
    getDuration(): number;
    setInhibitor(inhibitor: StreamScrubberInhibitor): void;
    protected isInhibited(): boolean;
    getCurrentTurn(): number;
    readonly currentTurn: number;
    nextTurn(): void;
    previousTurn(): void;
    skipBack(): void;
    nextAction(): void;
    previousAction(): void;
    readonly secondsWatched: number;
    readonly percentageWatched: number;
}
