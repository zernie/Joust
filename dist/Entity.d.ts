import * as Immutable from "immutable";
export default class Entity {
    protected _id: number;
    protected tags: Immutable.Map<string, number>;
    protected _cardId: string;
    constructor(_id: number, tags: Immutable.Map<string, number>, _cardId?: string);
    readonly id: number;
    readonly cardId: string;
    readonly hidden: boolean;
    readonly revealed: boolean;
    getResourcesUsed(): number;
    getResources(): number;
    isExhausted(): boolean;
    getDamage(): number;
    getHealth(): number;
    getAtk(): number;
    getArmor(): number;
    getCost(): number;
    getZone(): number;
    getController(): number;
    getDurability(): number;
    isPremium(): boolean;
    isLegendary(): boolean;
    isTaunter(): boolean;
    isStealthed(): boolean;
    isImmune(): boolean;
    isSilenced(): boolean;
    isDivineShielded(): boolean;
    getClass(): number;
    getCardType(): number;
    isFrozen(): boolean;
    isEnraged(): boolean;
    cantBeTargeted(): boolean;
    getZonePosition(): number;
    isAsleep(controller?: Entity): boolean;
    getTag(key: number): number;
    setTag(key: number, value: number): Entity;
    getTags(): Immutable.Map<string, number>;
    setTags(tags: Immutable.Map<string, number>): Entity;
    replaceTags(tags: Immutable.Map<string, number>): Entity;
    setCardId(cardId: string): Entity;
    toString(): string;
    protected factory(tags: Immutable.Map<string, number>, cardId: string): Entity;
}
