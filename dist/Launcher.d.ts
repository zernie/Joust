import HearthstoneJSON, { CardData } from "hearthstonejson-client";
import GameWidget, { GameWidgetProps } from "./components/GameWidget";
import { JoustEventHandler } from "./interfaces";
export default class Launcher {
    static destroy(target: any): void;
    protected target: string | HTMLElement;
    protected opts: GameWidgetProps;
    protected startFromTurn: number;
    protected turnCb: (turn: number) => void;
    protected shouldStartPaused: boolean;
    protected ref: GameWidget;
    protected cards: CardData[];
    protected metadataSourceCb: (build: number | "latest", locale: string) => string;
    protected _build: number | null;
    protected ready: boolean;
    protected hsjson: HearthstoneJSON;
    protected customLocale: boolean;
    protected _onSelectLocale: (locale: string) => void;
    constructor(target: any);
    width(width: number): Launcher;
    height(height: number): Launcher;
    assets(assets: string | ((asset: string) => string)): Launcher;
    cardArt(url: string | ((cardId: string) => string)): Launcher;
    metadataSource(metadataSource: (build: number | "latest", locale: string) => string): Launcher;
    setOptions(opts: any): Launcher;
    onTurn(callback: (turn: number) => void): Launcher;
    onToggleReveal(callback: (reveal: boolean) => void): Launcher;
    onToggleSwap(callback: (swap: boolean) => void): Launcher;
    onFullscreen(callback: (fullscreen: boolean) => void): Launcher;
    startPaused(paused?: boolean): Launcher;
    onReady(ready: () => void): Launcher;
    startAtTurn(turn: number): Launcher;
    startRevealed(reveal: boolean): Launcher;
    startSwapped(swap: boolean): Launcher;
    fullscreen(fullscreen: boolean): this;
    logger(logger: (message: string | Error) => void): Launcher;
    events(cb: JoustEventHandler): Launcher;
    debug(enable?: boolean): Launcher;
    locale(locale: string, cb?: () => void): Launcher;
    readonly build: number | null;
    onSelectLocale(callback: (locale: string) => void): void;
    readonly selectedLocale: string | null;
    readonly replayDuration: number;
    readonly secondsWatched: number;
    readonly percentageWatched: number;
    play(): void;
    pause(): void;
    toggle(): void;
    rewind(): void;
    stripBattletags(strip?: boolean): Launcher;
    turn: number;
    playing: boolean;
    readonly fullscreenSupported: boolean | null;
    enableKeybindings(): Launcher;
    disableKeybindings(): Launcher;
    addPlayerName(playerName: string): Launcher;
    fromUrl(url: string, cb?: () => any): Launcher;
    protected log(message: any): void;
    protected track(event: string, values: Object, tags?: Object): void;
    protected fetchLocale(cb?: () => void): void;
    protected render(cb?: () => any): void;
}
